/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "libincompressibleRASModels.so"
    "liblduSolvers.so"
);

application     pimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           5;

// ************************************************************************* //
//Author
    //Ehsan Golab, SUT. All rights reserved.

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
{
    magWSS
    {
        functionObjectLibs	("libutilityFunctionObjects.so");
        type			coded;
        enabled			true;
        outputControl		outputTime;//timeStep;
        redirectType		postProcess;

        codeInclude
        #{
            #include "fvCFD.H"
            #include "singlePhaseTransportModel.H"
            #include "RASModel.H"
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/turbulenceModels \
            -I$(LIB_SRC)/turbulenceModels/incompressible/RAS/RASModel \
            -I$(LIB_SRC)/transportModels \
            -I$(LIB_SRC)/transportModels/incompressible/singlePhaseTransportModel \
            -I$(LIB_SRC)/finiteVolume/lnInclude
        #};

        codeLibs
        #{
            -lincompressibleRASModels \
            -lincompressibleTransportModels \
            -lincompressibleTurbulenceModel \
            -lfiniteVolume \
            -llduSolvers
        #};

        code
        #{
            //- lookup fields
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const surfaceScalarField& phi = mesh().lookupObject<surfaceScalarField>("phi");
            const fvMesh& mesh = U.mesh();

            singlePhaseTransportModel laminarTransport(U, phi);
            dimensionedScalar rho(laminarTransport.lookup("rho"));
            autoPtr<Foam::incompressible::RASModel> model(Foam::incompressible::RASModel::New(U, phi, laminarTransport));
            const volSymmTensorField Reff(model->devReff());


            //- calculate WSS
            IOobject WSSHeader("WSS", mesh.time().timeName(), mesh, IOobject::NO_READ, IOobject::AUTO_WRITE);
            volVectorField WSS(WSSHeader, mesh, dimensionedVector("WSS",  dimMass/dimLength/sqr(dimTime), vector::zero));
            forAll(WSS.boundaryField(), patchI)
            {
                WSS.boundaryField()[patchI] = rho.value()*(-mesh.Sf().boundaryField()[patchI]/mesh.magSf().boundaryField()[patchI]) & Reff.boundaryField()[patchI];
            }

            IOobject magWSSHeader("magWSS", mesh.time().timeName(), mesh, IOobject::NO_READ, IOobject::AUTO_WRITE);
            volScalarField magWSS(WSSHeader, mesh, dimensionedScalar("magWSS", dimMass/dimLength/sqr(dimTime), 0.0));
            magWSS = mag(WSS);
            magWSS.write();
        #};
    }
}
// ************************************************************************* //
